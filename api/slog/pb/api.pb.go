// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TransactionType int32

const (
	TransactionType_UNKNOWN                 TransactionType = 0
	TransactionType_SINGLE_HOME             TransactionType = 1
	TransactionType_MULTI_HOME_OR_LOCK_ONLY TransactionType = 2
)

var TransactionType_name = map[int32]string{
	0: "UNKNOWN",
	1: "SINGLE_HOME",
	2: "MULTI_HOME_OR_LOCK_ONLY",
}

var TransactionType_value = map[string]int32{
	"UNKNOWN":                 0,
	"SINGLE_HOME":             1,
	"MULTI_HOME_OR_LOCK_ONLY": 2,
}

func (x TransactionType) String() string {
	return proto.EnumName(TransactionType_name, int32(x))
}

func (TransactionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}

type TransactionStatus int32

const (
	TransactionStatus_NOT_STARTED TransactionStatus = 0
	TransactionStatus_COMMITTED   TransactionStatus = 1
	TransactionStatus_ABORTED     TransactionStatus = 2
)

var TransactionStatus_name = map[int32]string{
	0: "NOT_STARTED",
	1: "COMMITTED",
	2: "ABORTED",
}

var TransactionStatus_value = map[string]int32{
	"NOT_STARTED": 0,
	"COMMITTED":   1,
	"ABORTED":     2,
}

func (x TransactionStatus) String() string {
	return proto.EnumName(TransactionStatus_name, int32(x))
}

func (TransactionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}

type OperationType int32

const (
	OperationType_GET    OperationType = 0
	OperationType_PUT    OperationType = 1
	OperationType_DELETE OperationType = 2
	OperationType_SCAN   OperationType = 3
)

var OperationType_name = map[int32]string{
	0: "GET",
	1: "PUT",
	2: "DELETE",
	3: "SCAN",
}

var OperationType_value = map[string]int32{
	"GET":    0,
	"PUT":    1,
	"DELETE": 2,
	"SCAN":   3,
}

func (x OperationType) String() string {
	return proto.EnumName(OperationType_name, int32(x))
}

func (OperationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}

type Reply struct {
	Message              string   `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Values               [][]byte `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{0}
}
func (m *Reply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return m.Size()
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Reply) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

type Range struct {
	UpperBound           []byte   `protobuf:"bytes,1,opt,name=upper_bound,json=upperBound,proto3" json:"upper_bound,omitempty"`
	LowerBound           []byte   `protobuf:"bytes,2,opt,name=lower_bound,json=lowerBound,proto3" json:"lower_bound,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Range) Reset()         { *m = Range{} }
func (m *Range) String() string { return proto.CompactTextString(m) }
func (*Range) ProtoMessage()    {}
func (*Range) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{1}
}
func (m *Range) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Range) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Range.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Range) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Range.Merge(m, src)
}
func (m *Range) XXX_Size() int {
	return m.Size()
}
func (m *Range) XXX_DiscardUnknown() {
	xxx_messageInfo_Range.DiscardUnknown(m)
}

var xxx_messageInfo_Range proto.InternalMessageInfo

func (m *Range) GetUpperBound() []byte {
	if m != nil {
		return m.UpperBound
	}
	return nil
}

func (m *Range) GetLowerBound() []byte {
	if m != nil {
		return m.LowerBound
	}
	return nil
}

type Operation struct {
	Key                  []byte        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                []byte        `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Range                *Range        `protobuf:"bytes,3,opt,name=range,proto3" json:"range,omitempty"`
	OperationType        OperationType `protobuf:"varint,4,opt,name=operation_type,json=operationType,proto3,enum=slog.OperationType" json:"operation_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Operation) Reset()         { *m = Operation{} }
func (m *Operation) String() string { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()    {}
func (*Operation) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{2}
}
func (m *Operation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operation.Merge(m, src)
}
func (m *Operation) XXX_Size() int {
	return m.Size()
}
func (m *Operation) XXX_DiscardUnknown() {
	xxx_messageInfo_Operation.DiscardUnknown(m)
}

var xxx_messageInfo_Operation proto.InternalMessageInfo

func (m *Operation) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *Operation) GetValue() []byte {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Operation) GetRange() *Range {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *Operation) GetOperationType() OperationType {
	if m != nil {
		return m.OperationType
	}
	return OperationType_GET
}

type Transaction struct {
	TransactionType      TransactionType   `protobuf:"varint,1,opt,name=transaction_type,json=transactionType,proto3,enum=slog.TransactionType" json:"transaction_type,omitempty"`
	TransactionStatus    TransactionStatus `protobuf:"varint,2,opt,name=transaction_status,json=transactionStatus,proto3,enum=slog.TransactionStatus" json:"transaction_status,omitempty"`
	Operations           []*Operation      `protobuf:"bytes,3,rep,name=operations,proto3" json:"operations,omitempty"`
	ReadSet              [][]byte          `protobuf:"bytes,4,rep,name=read_set,json=readSet,proto3" json:"read_set,omitempty"`
	WriteSet             [][]byte          `protobuf:"bytes,5,rep,name=write_set,json=writeSet,proto3" json:"write_set,omitempty"`
	ReadWriteSet         [][]byte          `protobuf:"bytes,6,rep,name=read_write_set,json=readWriteSet,proto3" json:"read_write_set,omitempty"`
	Readers              []int32           `protobuf:"varint,7,rep,packed,name=readers,proto3" json:"readers,omitempty"`
	Writers              []int32           `protobuf:"varint,8,rep,packed,name=writers,proto3" json:"writers,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_00212fb1f9d3bf1c, []int{3}
}
func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return m.Size()
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetTransactionType() TransactionType {
	if m != nil {
		return m.TransactionType
	}
	return TransactionType_UNKNOWN
}

func (m *Transaction) GetTransactionStatus() TransactionStatus {
	if m != nil {
		return m.TransactionStatus
	}
	return TransactionStatus_NOT_STARTED
}

func (m *Transaction) GetOperations() []*Operation {
	if m != nil {
		return m.Operations
	}
	return nil
}

func (m *Transaction) GetReadSet() [][]byte {
	if m != nil {
		return m.ReadSet
	}
	return nil
}

func (m *Transaction) GetWriteSet() [][]byte {
	if m != nil {
		return m.WriteSet
	}
	return nil
}

func (m *Transaction) GetReadWriteSet() [][]byte {
	if m != nil {
		return m.ReadWriteSet
	}
	return nil
}

func (m *Transaction) GetReaders() []int32 {
	if m != nil {
		return m.Readers
	}
	return nil
}

func (m *Transaction) GetWriters() []int32 {
	if m != nil {
		return m.Writers
	}
	return nil
}

func init() {
	proto.RegisterEnum("slog.TransactionType", TransactionType_name, TransactionType_value)
	proto.RegisterEnum("slog.TransactionStatus", TransactionStatus_name, TransactionStatus_value)
	proto.RegisterEnum("slog.OperationType", OperationType_name, OperationType_value)
	proto.RegisterType((*Reply)(nil), "slog.Reply")
	proto.RegisterType((*Range)(nil), "slog.Range")
	proto.RegisterType((*Operation)(nil), "slog.Operation")
	proto.RegisterType((*Transaction)(nil), "slog.Transaction")
}

func init() { proto.RegisterFile("api.proto", fileDescriptor_00212fb1f9d3bf1c) }

var fileDescriptor_00212fb1f9d3bf1c = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x53, 0xcb, 0x6e, 0xda, 0x40,
	0x14, 0x65, 0xfc, 0xe0, 0x71, 0x1d, 0xc0, 0x4c, 0xdb, 0xc4, 0x6d, 0x24, 0xea, 0xa2, 0x2e, 0x2c,
	0x16, 0x44, 0xa5, 0x8b, 0x2a, 0x5d, 0x05, 0x88, 0x9b, 0xa2, 0x18, 0xbb, 0x1a, 0x1b, 0x45, 0xed,
	0xc6, 0x32, 0xc9, 0x08, 0xa1, 0x52, 0x6c, 0xd9, 0x26, 0x94, 0xdf, 0xe8, 0xaa, 0x9f, 0xd4, 0x65,
	0xd7, 0x5d, 0x55, 0xf4, 0x47, 0xaa, 0x19, 0x03, 0x21, 0xb0, 0x9b, 0xf3, 0xb8, 0x67, 0xee, 0x9d,
	0x07, 0x94, 0x82, 0x68, 0xd2, 0x8a, 0xe2, 0x30, 0x0d, 0xb1, 0x94, 0x4c, 0xc3, 0x71, 0xe3, 0x1c,
	0x64, 0x42, 0xa3, 0xe9, 0x12, 0x6b, 0x50, 0xf8, 0x46, 0x93, 0x24, 0x18, 0x53, 0x0d, 0xe9, 0xc8,
	0x28, 0x91, 0x0d, 0xc4, 0xc7, 0x90, 0xbf, 0x0f, 0xa6, 0x73, 0x9a, 0x68, 0x82, 0x2e, 0x1a, 0x47,
	0x64, 0x8d, 0x1a, 0x7d, 0x90, 0x49, 0x30, 0x1b, 0x53, 0xfc, 0x12, 0x94, 0x79, 0x14, 0xd1, 0xd8,
	0x1f, 0x85, 0xf3, 0xd9, 0x1d, 0x2f, 0x3f, 0x22, 0xc0, 0xa9, 0x2e, 0x63, 0x98, 0x61, 0x1a, 0x2e,
	0xb6, 0x06, 0x21, 0x33, 0x70, 0x8a, 0x1b, 0x1a, 0x3f, 0x10, 0x94, 0x9c, 0x88, 0xc6, 0x41, 0x3a,
	0x09, 0x67, 0x58, 0x05, 0xf1, 0x2b, 0x5d, 0xae, 0x73, 0xd8, 0x12, 0x3f, 0x05, 0x99, 0x6f, 0xba,
	0x2e, 0xcd, 0x00, 0x7e, 0x05, 0x72, 0xcc, 0x1a, 0xd0, 0x44, 0x1d, 0x19, 0x4a, 0x5b, 0x69, 0xb1,
	0x89, 0x5a, 0xbc, 0x27, 0x92, 0x29, 0xf8, 0x3d, 0x54, 0xc2, 0x4d, 0xae, 0x9f, 0x2e, 0x23, 0xaa,
	0x49, 0x3a, 0x32, 0x2a, 0xed, 0x27, 0x99, 0x77, 0xbb, 0xa7, 0xb7, 0x8c, 0x28, 0x29, 0x87, 0xbb,
	0xb0, 0xf1, 0x47, 0x00, 0xc5, 0x8b, 0x83, 0x59, 0x12, 0xdc, 0xf2, 0xb6, 0x2e, 0x40, 0x4d, 0x1f,
	0x60, 0x96, 0x86, 0x78, 0xda, 0xb3, 0x2c, 0x6d, 0xc7, 0xcc, 0xf3, 0xaa, 0xe9, 0x63, 0x02, 0x7f,
	0x00, 0xbc, 0x9b, 0x90, 0xa4, 0x41, 0x3a, 0x4f, 0xf8, 0x4c, 0x95, 0xf6, 0xc9, 0x41, 0x86, 0xcb,
	0x65, 0x52, 0x4b, 0xf7, 0x29, 0x7c, 0x06, 0xb0, 0x6d, 0x35, 0xd1, 0x44, 0x5d, 0x34, 0x94, 0x76,
	0x75, 0x6f, 0x22, 0xb2, 0x63, 0xc1, 0xcf, 0xa1, 0x18, 0xd3, 0xe0, 0xce, 0x4f, 0x68, 0xaa, 0x49,
	0xfc, 0x12, 0x0b, 0x0c, 0xbb, 0x34, 0xc5, 0xa7, 0x50, 0x5a, 0xc4, 0x93, 0x94, 0x72, 0x4d, 0xe6,
	0x5a, 0x91, 0x13, 0x4c, 0x7c, 0x0d, 0x15, 0x5e, 0xf7, 0xe0, 0xc8, 0x73, 0xc7, 0x11, 0x63, 0x6f,
	0x36, 0x2e, 0x0d, 0x78, 0x1a, 0x8d, 0x13, 0xad, 0xa0, 0x8b, 0x86, 0x4c, 0x36, 0x90, 0x29, 0xbc,
	0x34, 0x4e, 0xb4, 0x62, 0xa6, 0xac, 0x61, 0xd3, 0x82, 0xea, 0xde, 0x71, 0x61, 0x05, 0x0a, 0x43,
	0xfb, 0xda, 0x76, 0x6e, 0x6c, 0x35, 0x87, 0xab, 0xa0, 0xb8, 0x7d, 0xfb, 0xca, 0x32, 0xfd, 0x8f,
	0xce, 0xc0, 0x54, 0x11, 0x3e, 0x85, 0x93, 0xc1, 0xd0, 0xf2, 0xfa, 0x1c, 0xfb, 0x0e, 0xf1, 0x2d,
	0xa7, 0x77, 0xed, 0x3b, 0xb6, 0xf5, 0x59, 0x15, 0x9a, 0x17, 0x50, 0x3b, 0x38, 0x38, 0x16, 0x61,
	0x3b, 0x9e, 0xef, 0x7a, 0x1d, 0xe2, 0x99, 0x97, 0x6a, 0x0e, 0x97, 0xa1, 0xd4, 0x73, 0x06, 0x83,
	0xbe, 0xc7, 0x20, 0x62, 0xfb, 0x75, 0xba, 0x0e, 0xd7, 0x84, 0xe6, 0x3b, 0x28, 0x3f, 0x7a, 0x0c,
	0xb8, 0x00, 0xe2, 0x95, 0xe9, 0xa9, 0x39, 0xb6, 0xf8, 0x34, 0xf4, 0x54, 0x84, 0x01, 0xf2, 0x97,
	0xa6, 0x65, 0x7a, 0xa6, 0x2a, 0xe0, 0x22, 0x48, 0x6e, 0xaf, 0x63, 0xab, 0x62, 0xfb, 0x1c, 0x24,
	0x77, 0x1a, 0x8e, 0xf1, 0x1b, 0x28, 0x13, 0x7a, 0x4b, 0x27, 0xf7, 0xd4, 0xa6, 0x0b, 0xef, 0xfb,
	0x0c, 0xd7, 0x0e, 0x2e, 0xf4, 0xc5, 0xe6, 0x85, 0xb2, 0x0f, 0xd7, 0xc8, 0x75, 0x8f, 0x7f, 0xad,
	0xea, 0xe8, 0xf7, 0xaa, 0x8e, 0xfe, 0xae, 0xea, 0xe8, 0xe7, 0xbf, 0x7a, 0xee, 0x8b, 0xd4, 0x3a,
	0x8b, 0x46, 0xa3, 0x3c, 0xff, 0xa0, 0x6f, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xd9, 0x60, 0x31,
	0xce, 0xad, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SlogClient is the client API for Slog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SlogClient interface {
	ReceiveNewTxn(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error)
}

type slogClient struct {
	cc *grpc.ClientConn
}

func NewSlogClient(cc *grpc.ClientConn) SlogClient {
	return &slogClient{cc}
}

func (c *slogClient) ReceiveNewTxn(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/slog.Slog/ReceiveNewTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SlogServer is the server API for Slog service.
type SlogServer interface {
	ReceiveNewTxn(context.Context, *Transaction) (*Reply, error)
}

// UnimplementedSlogServer can be embedded to have forward compatible implementations.
type UnimplementedSlogServer struct {
}

func (*UnimplementedSlogServer) ReceiveNewTxn(ctx context.Context, req *Transaction) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveNewTxn not implemented")
}

func RegisterSlogServer(s *grpc.Server, srv SlogServer) {
	s.RegisterService(&_Slog_serviceDesc, srv)
}

func _Slog_ReceiveNewTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SlogServer).ReceiveNewTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/slog.Slog/ReceiveNewTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SlogServer).ReceiveNewTxn(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Slog_serviceDesc = grpc.ServiceDesc{
	ServiceName: "slog.Slog",
	HandlerType: (*SlogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReceiveNewTxn",
			Handler:    _Slog_ReceiveNewTxn_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func (m *Reply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Reply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Reply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Range) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Range) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Range) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LowerBound) > 0 {
		i -= len(m.LowerBound)
		copy(dAtA[i:], m.LowerBound)
		i = encodeVarintApi(dAtA, i, uint64(len(m.LowerBound)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.UpperBound) > 0 {
		i -= len(m.UpperBound)
		copy(dAtA[i:], m.UpperBound)
		i = encodeVarintApi(dAtA, i, uint64(len(m.UpperBound)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Operation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.OperationType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.OperationType))
		i--
		dAtA[i] = 0x20
	}
	if m.Range != nil {
		{
			size, err := m.Range.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintApi(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintApi(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Transaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Writers) > 0 {
		dAtA3 := make([]byte, len(m.Writers)*10)
		var j2 int
		for _, num1 := range m.Writers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintApi(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Readers) > 0 {
		dAtA5 := make([]byte, len(m.Readers)*10)
		var j4 int
		for _, num1 := range m.Readers {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintApi(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReadWriteSet) > 0 {
		for iNdEx := len(m.ReadWriteSet) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReadWriteSet[iNdEx])
			copy(dAtA[i:], m.ReadWriteSet[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.ReadWriteSet[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.WriteSet) > 0 {
		for iNdEx := len(m.WriteSet) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.WriteSet[iNdEx])
			copy(dAtA[i:], m.WriteSet[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.WriteSet[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ReadSet) > 0 {
		for iNdEx := len(m.ReadSet) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReadSet[iNdEx])
			copy(dAtA[i:], m.ReadSet[iNdEx])
			i = encodeVarintApi(dAtA, i, uint64(len(m.ReadSet[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Operations) > 0 {
		for iNdEx := len(m.Operations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintApi(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TransactionStatus != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TransactionStatus))
		i--
		dAtA[i] = 0x10
	}
	if m.TransactionType != 0 {
		i = encodeVarintApi(dAtA, i, uint64(m.TransactionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintApi(dAtA []byte, offset int, v uint64) int {
	offset -= sovApi(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Reply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Range) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UpperBound)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.LowerBound)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Operation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovApi(uint64(l))
	}
	if m.Range != nil {
		l = m.Range.Size()
		n += 1 + l + sovApi(uint64(l))
	}
	if m.OperationType != 0 {
		n += 1 + sovApi(uint64(m.OperationType))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Transaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionType != 0 {
		n += 1 + sovApi(uint64(m.TransactionType))
	}
	if m.TransactionStatus != 0 {
		n += 1 + sovApi(uint64(m.TransactionStatus))
	}
	if len(m.Operations) > 0 {
		for _, e := range m.Operations {
			l = e.Size()
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.ReadSet) > 0 {
		for _, b := range m.ReadSet {
			l = len(b)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.WriteSet) > 0 {
		for _, b := range m.WriteSet {
			l = len(b)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.ReadWriteSet) > 0 {
		for _, b := range m.ReadWriteSet {
			l = len(b)
			n += 1 + l + sovApi(uint64(l))
		}
	}
	if len(m.Readers) > 0 {
		l = 0
		for _, e := range m.Readers {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if len(m.Writers) > 0 {
		l = 0
		for _, e := range m.Writers {
			l += sovApi(uint64(e))
		}
		n += 1 + sovApi(uint64(l)) + l
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovApi(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozApi(x uint64) (n int) {
	return sovApi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Reply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Reply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Reply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Range) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Range: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Range: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperBound", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UpperBound = append(m.UpperBound[:0], dAtA[iNdEx:postIndex]...)
			if m.UpperBound == nil {
				m.UpperBound = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerBound", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LowerBound = append(m.LowerBound[:0], dAtA[iNdEx:postIndex]...)
			if m.LowerBound == nil {
				m.LowerBound = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Operation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = append(m.Key[:0], dAtA[iNdEx:postIndex]...)
			if m.Key == nil {
				m.Key = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Range", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Range == nil {
				m.Range = &Range{}
			}
			if err := m.Range.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperationType", wireType)
			}
			m.OperationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperationType |= OperationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Transaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowApi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionType", wireType)
			}
			m.TransactionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionType |= TransactionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionStatus", wireType)
			}
			m.TransactionStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionStatus |= TransactionStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operations = append(m.Operations, &Operation{})
			if err := m.Operations[len(m.Operations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadSet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadSet = append(m.ReadSet, make([]byte, postIndex-iNdEx))
			copy(m.ReadSet[len(m.ReadSet)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WriteSet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WriteSet = append(m.WriteSet, make([]byte, postIndex-iNdEx))
			copy(m.WriteSet[len(m.WriteSet)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadWriteSet", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowApi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthApi
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthApi
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReadWriteSet = append(m.ReadWriteSet, make([]byte, postIndex-iNdEx))
			copy(m.ReadWriteSet[len(m.ReadWriteSet)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Readers = append(m.Readers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Readers) == 0 {
					m.Readers = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Readers = append(m.Readers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Readers", wireType)
			}
		case 8:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Writers = append(m.Writers, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowApi
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthApi
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthApi
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Writers) == 0 {
					m.Writers = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowApi
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Writers = append(m.Writers, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Writers", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipApi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthApi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipApi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowApi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowApi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthApi
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupApi
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthApi
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthApi        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowApi          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupApi = fmt.Errorf("proto: unexpected end of group")
)
